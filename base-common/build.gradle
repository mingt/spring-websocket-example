/*
* Build file for base common
*/
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'
apply plugin: 'eclipse'

buildscript {
	project.ext {
        jarName = 'base-common'
        versionName = getVersionNameShort()
	}
    repositories {
        // mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://oss.sonatype.org/content/groups/public/" }
        maven { url "https://repo.spring.io/libs-milestone/" }
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${project.springBootVersion}"
        classpath "se.transmode.gradle:gradle-docker:${project.gradleDockerVersion}"
    }
}

task createWrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

/**
* These values(group & mainClassName) are required by the gradle docker plugin.
*
* The "group" value feeds into the docker tag and is required if you want to push the images
* to docker hub.
*
* The "mainClassName" value tells which class has the "main" entry point for running the
* Spring boot application.
*/

group = 'neoframework'
// 本项目未使用
mainClassName = 'com.neoframework.microservices.base.ApiApplication'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    //maven {
    //    url "http://maven.aliyun.com/nexus/content/groups/public"
    //}
}

dependencyManagement {
  imports {
    mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Dalston.RELEASE'
  }
}

dependencies {
    // Basic Spring boot with config client
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile("org.springframework.boot:spring-boot-starter-aop")

    compile('org.springframework:spring-webmvc:4.3.8.RELEASE')
    compile('org.springframework:spring-context:4.3.8.RELEASE')
    compile('org.springframework:spring-context-support:4.3.8.RELEASE')

    // Spring OAuth2 security
    compile("org.springframework.security:spring-security-core:4.2.3.RELEASE")

    // 4.1.9.RELEASE
	compile('org.springframework:spring-tx:4.3.8.RELEASE')
	compile('org.springframework:spring-test:4.3.8.RELEASE')
	compile('org.springframework:spring-jdbc:4.3.8.RELEASE')
	compile('org.springframework:spring-orm:4.3.8.RELEASE')

    compile('org.hibernate:hibernate-validator:5.3.5.Final') // 5.2.4.Final

    // database
    compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:1.1.1")
    compile("mysql:mysql-connector-java:5.1.30")

    // general utils
    compile('org.apache.commons:commons-lang3:3.3.2')

    // lib
    // compile fileTree(dir: 'libs', include: '**/*.jar')

    // test
    testCompile("junit:junit:4.12")
}

jar {
    baseName = "${project.jarName}"
    version =  "${project.versionName}"
}

/*
 * 生成版本设定属性文件.
 * TODO: 若为支持子项目独立自定义版本，可在子项目这里自定义 getVersionName 相应处理。目前暂统一使用 rootProject 的定义
 */
processResources.doLast {
    if (rootProject.hasProperty("build_type")) {
        println "generate version properties for ${project.name}"
        def configFile = new File('build/resources/main/version.properties')
        configFile.withOutputStream { os ->
            os << '# Auto generated version properties\n'
            os << 'name=' + project.name + '\n'
            os << 'version=' + version + '\n'
            os << 'versionDetail=' + getVersionName(version) + '\n'
            os << 'versionCode=' + getVersionCode(version) + '\n'
        }
    }
}

//run {
//    jvmArgs = ['-Xdebug', '-Xrunjdwp:server=y,transport=dt_socket,address=4300,suspend=n','-Dspring.profiles.active=default']
//}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}
